#region legal notice
// Copyright(c) 2016 - 2018 Thermo Fisher Scientific - LSMS
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion legal notice
using System;
using System.Threading;

using Thermo.Interfaces.ExactiveAccess_V1;
using Thermo.Interfaces.InstrumentAccess_V1.Control.Scans;
using Thermo.Interfaces.InstrumentAccess_V1.MsScanContainer;
using IMsScan = Thermo.Interfaces.InstrumentAccess_V2.MsScanContainer.IMsScan;

namespace PlacingScans
{
	/// <summary>
	/// Place 10 individual scans after arrival of at least one scan. Here we watch for
	/// a trigger by the instrument to set a following scan. In contrast to CustomScansTandemByArrival we are
	/// able to set scans in a row even when the instrument runs at high speed.
	/// </summary>
	class CustomScansTandemByCallback
	{
		int m_scanId = 1;   // must be != 0
		bool m_initialCondition = true;
		IScans m_scans = null;

		internal CustomScansTandemByCallback() { }

		internal void DoJob()
		{
			using (IExactiveInstrumentAccess instrument = Connection.GetFirstInstrument())
			{
				using (m_scans = instrument.Control.GetScans(false))
				{
					WaitFor(m_scans);
					IMsScanContainer orbitrap = instrument.GetMsScanContainer(0);
					Console.WriteLine("Waiting 60 seconds for scans on detector " + orbitrap.DetectorClass + "...");

					orbitrap.MsScanArrived += Orbitrap_MsScanArrived;
					m_scans.CanAcceptNextCustomScan += Scans_CanAcceptNextCustomScan;
					Thread.CurrentThread.Join(60000);
					orbitrap.MsScanArrived -= Orbitrap_MsScanArrived;
					m_scans.CanAcceptNextCustomScan -= Scans_CanAcceptNextCustomScan;
				}
			}
		}

		/// <summary>
		/// Wait up to 10 seconds to see the list of parameters for scans. Before that we cannot place scans.
		/// </summary>
		/// <param name="scans">interface to use</param>
		private void WaitFor(IScans scans)
		{
			Console.WriteLine("{0:HH:mm:ss,fff} waiting for IScans interface to become ready", DateTime.Now);
			ManualResetEvent wait = new ManualResetEvent(false);

			EventHandler handler = (sender,e) => { wait.Set(); };
			scans.PossibleParametersChanged += handler;
			if ((scans.PossibleParameters != null) && (scans.PossibleParameters.Length > 0))
			{
				wait.Set();
			}
			wait.WaitOne(10000);
			scans.PossibleParametersChanged -= handler;

			if ((scans.PossibleParameters == null) || (scans.PossibleParameters.Length == 0))
			{
				throw new TimeoutException("Not connected to the instrument or something else happened.");
			}
			Console.WriteLine("{0:HH:mm:ss,fff} end of wait", DateTime.Now);
		}

		/// <summary>
		/// This event handler gets fired ONCE after a new individual scan has been placed. Placing a scan
		/// at any point in time lets the API fire a further event.
		/// </summary>
		private void Scans_CanAcceptNextCustomScan(object sender, EventArgs e)
		{
			// This event will be thrown on END of a CUSTOM scan, but non anytime when possible. Consider an instrument disconnect or an instrument reboot.
			Console.WriteLine("CanAcceptNextCustomScan");
			PlaceScan();
		}

		private void Orbitrap_MsScanArrived(object sender, MsScanEventArgs e)
		{
			string accessId;
			using (IMsScan scan = (IMsScan) e.GetScan())    // caution! You must dispose this, or you block shared memory!
			{
				// The access ID gives a feedback about placed scans or scans generated by the instrument.
				scan.SpecificInformation.TryGetValue("Access Id:", out accessId);
				Console.WriteLine("{0:HH:mm:ss,fff} scan {1} arrived", DateTime.Now, accessId);
				if (m_initialCondition)
				{
					m_initialCondition = false;
					PlaceScan();
				}
			}
		}

		private void PlaceScan()
		{
			if (m_scanId > 10)
			{
				return;
			}
			ICustomScan scan = m_scans.CreateCustomScan();
			scan.RunningNumber = m_scanId++;
			scan.Values["Polarity"] = "1";
			if (m_scanId == 5)
			{
				// Let the instrument wait for a maximum of 500 seconds, which will not happen under normal circumstances.
				// Within that time, the instrument waits for placing a new scan
				scan.SingleProcessingDelay = 500;
			}
			Console.WriteLine("{0:HH:mm:ss,fff} placing scan {1}", DateTime.Now, scan.RunningNumber);
			m_scans.SetCustomScan(scan);
		}
	}
}
